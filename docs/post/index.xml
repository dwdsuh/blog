<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dayone&#39;s Blog</title>
    <link>https://dwdsuh.github.io/blog/post/</link>
    <description>Recent content in Posts on Dayone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Jul 2019 15:06:35 +0900</lastBuildDate>
    
	<atom:link href="https://dwdsuh.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Paper Review] NMT by Jointly Learning to Align and Translate</title>
      <link>https://dwdsuh.github.io/blog/post/paper_review_nmt_jointly_align_translate/</link>
      <pubDate>Wed, 31 Jul 2019 15:06:35 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/paper_review_nmt_jointly_align_translate/</guid>
      <description>Neural Machine Translation by Jointly Learning to Align and Translate Paper URL: Click Here
Outline  Motivation: A Fixed-length Vector is a Hurdle  1.1. Basic Encoder-Decoder Architecture
1.2. The Structural Problem with the Basic Architecture
 Contribution: the Advent of Alignment Model (aka Attention)  2.1. Model Architecture
 ​2.1.1. [Encoder: Bidirectional RNN](https://github.com/dwdsuh/Paper_Review/blob/master/NMTbyJointlyAlignTranslate.md#211-encoder-bidirectional-rnn) ​2.1.2. [Decoder: Model Joint Learns How to Align and Translate](https://github.com/dwdsuh/Paper_Review/blob/master/NMTbyJointlyAlignTranslate.md#212-decoder-model-jointly-learns-how-to--align-and-translate)  2.2. Training Procedure
2.3. Result</description>
    </item>
    
    <item>
      <title>[Bash] Shell Script Programming</title>
      <link>https://dwdsuh.github.io/blog/post/shell_script_programming_2/</link>
      <pubDate>Sun, 28 Jul 2019 15:27:49 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/shell_script_programming_2/</guid>
      <description>Shell Script Programming source: 이것이 리눅스다. 한빛미디어. 우재남 저
1. 셸 명령문 기본 문법  명령어 [옵션] [인자]  ls -la rm -rf /mydir find . / -name &amp;quot;*.config&amp;quot;   환경변수
 확인하기  #echo $환경변수이름 echo $HOME echo $HOSTNAME   변경하기  #export 환경변수 = 값 export $HOME = day1   2. 셸 스크립트 프로그래밍 실습  C언어와 비슷 변수, 반복문, 제어문 등을 사용할 수 있음 별도로 컴파일하지 않고 텍스트 파일 형태로 셸에서 바로 실행.</description>
    </item>
    
    <item>
      <title>[Git] Git Command Cheat Sheet / Git 명령어 정리</title>
      <link>https://dwdsuh.github.io/blog/post/git_tutorial/</link>
      <pubDate>Sat, 27 Jul 2019 21:17:55 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/git_tutorial/</guid>
      <description>Git Command Cheat Sheet 1. Basics  check out your git version
  git --version   change username and email  git config --global user.name &amp;quot;A-one_Day1&amp;quot; git config --global user.email &amp;quot;dwdsuh@gmail.com&amp;quot;   help  git help config git config --help  config is just an example. you can type clone, merge etc
 initialize git  git init   remove git  rm -rf .git   check out the state  git status   make some file not tracked by git(not to push to repository)  touch .</description>
    </item>
    
    <item>
      <title>[CS] Searhing Strategy</title>
      <link>https://dwdsuh.github.io/blog/post/searhing_stragegy/</link>
      <pubDate>Tue, 23 Jul 2019 10:34:23 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/searhing_stragegy/</guid>
      <description>Greedy Search  an algorithmic paradigm that follows the problem solving heuristic of making the locally optimal choice at each stage. traveling salesman problem: At each step of the journey, visit the nearest unvisited city. Does Not ensure the global optimum, but returns locally optimal solutions.  Beam Search  beam width: the number of candidates that we are going to examine at each step.  If the beam width ==1, it is greedy search.</description>
    </item>
    
    <item>
      <title>[Python] tf.estimator / 텐서플로우 에스티메이터 활용하기</title>
      <link>https://dwdsuh.github.io/blog/post/estimator/</link>
      <pubDate>Tue, 23 Jul 2019 10:02:02 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/estimator/</guid>
      <description>Implementing tf.estimator/ 텐서플로우 에스티메이터 활용하기 출처(source): 텐서플로와 머신러닝으로 시작하는 자연어처리. 전창욱 외 2명. 위키북스. 2019
1. Overview  What is Estimator? High level API that helps developers train, evalutate, predict and export the models.
 2 major factors
 model_function  def model_fn(features, labels, mode, params, config): # construct your model here return tf.estimator.EstimatorSpec(...)   features: Input data. The data structure of those should be either tf.Tensor or dictionary</description>
    </item>
    
    <item>
      <title>[Bash] Linux Command Cheat Sheet / 리눅스 명령어 정리</title>
      <link>https://dwdsuh.github.io/blog/post/linux_command_cheat_sheet/</link>
      <pubDate>Mon, 22 Jul 2019 12:07:38 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/linux_command_cheat_sheet/</guid>
      <description>Linux Command Cheat Sheet/ 리눅스 명령어 정리 This blog post is a summary of Mr. Schafer&amp;rsquo;s youtube video
Mac Terminal Cheat Sheet  Ctrl+a: 맨 앞으로 Ctrl+e: 맨 뒤로 Opt+마우스 클릭: 커서 이동 Ctrl+u: 커서 앞의 내용 모두 삭제 Ctrl+k: 커서 뒤의 내용 모두 삭제 drag and drop folder: 디렉토리 경로 완성  find commend in linux  find .  &amp;ndash;&amp;gt; 모든 파일 탐색
 find . -type d  &amp;ndash;&amp;gt; 디렉토리 탐색.</description>
    </item>
    
    <item>
      <title>[Python] Preprocessing &#34;Big Data&#34; / 대용량 파일 전처리</title>
      <link>https://dwdsuh.github.io/blog/post/preprocessing/</link>
      <pubDate>Sun, 14 Jul 2019 16:31:46 +0900</pubDate>
      
      <guid>https://dwdsuh.github.io/blog/post/preprocessing/</guid>
      <description>[Preprocessing]: How to Randomly Sample from a File of Tremendous Size. Dealing with Big Data, I usually have to handle data &amp;ldquo;bigger&amp;rdquo; than 10GB. Last week, I wanted to sample 100K sentences from the file of 50M-ish sentences. At first, I naively wrote a code to open the file and select samples using indexing samples with numpy.random. Unfortunately, the code was starting to deprive me of my lifetime. I cannot help interrupting the code and searching for the faster method.</description>
    </item>
    
  </channel>
</rss>